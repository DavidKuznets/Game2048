{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["class $a5fd07fa01589658$var$Game {\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.board = initialState;\n        this.score = 0;\n        this.status = \"idle\";\n        this.cells = document.querySelectorAll(\".field-cell\");\n        this.scoreElement = document.querySelector(\".game-score\");\n        this.messageLose = document.querySelector(\".message-lose\");\n        this.messageWin = document.querySelector(\".message-win\");\n        this.messageStart = document.querySelector(\".message-start\");\n    }\n    getState() {\n        return this.board;\n    }\n    getScore() {\n        return this.score;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = \"playing\";\n        this.addRandomTile();\n        this.addRandomTile();\n        this.updateBoard();\n        this.hideMessages();\n    }\n    restart() {\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = \"idle\";\n        this.start();\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        for(let i = 0; i < 4; i++){\n            for(let j = 0; j < 4; j++)if (this.board[i][j] === 0) emptyCells.push({\n                row: i,\n                col: j\n            });\n        }\n        if (emptyCells.length > 0) {\n            const { row: row, col: col } = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    moveLeft() {\n        this.move((row)=>row);\n    }\n    moveRight() {\n        this.move((row)=>row.reverse());\n    }\n    moveUp() {\n        this.moveColumns((col)=>col);\n    }\n    moveDown() {\n        this.moveColumns((col)=>col.reverse());\n    }\n    move(transformRow) {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let i = 0; i < 4; i++){\n            const row = transformRow([\n                ...this.board[i]\n            ]);\n            const compressed = this.compressRow(row);\n            const merged = this.mergeRow(compressed);\n            const finalRow = this.compressRow(merged);\n            if (row.toString() !== finalRow.toString()) moved = true;\n            this.board[i] = transformRow([\n                ...finalRow\n            ]);\n        }\n        if (moved) {\n            this.addRandomTile();\n            this.checkGameOver();\n            this.updateBoard();\n        }\n    }\n    moveColumns(transformCol) {\n        this.transpose();\n        this.move(transformCol);\n        this.transpose();\n        this.updateBoard();\n    }\n    transpose() {\n        const firstRow = this.board[0];\n        this.board = firstRow.map((_, colIndex)=>{\n            return this.board.map((row)=>row[colIndex]);\n        });\n    }\n    compressRow(row) {\n        return row.filter((val)=>val !== 0).concat(Array(4).fill(0)).slice(0, 4);\n    }\n    mergeRow(row) {\n        for(let i = 0; i < 3; i++)if (row[i] !== 0 && row[i] === row[i + 1]) {\n            row[i] *= 2;\n            row[i + 1] = 0;\n            this.score += row[i];\n        }\n        return row;\n    }\n    checkGameOver() {\n        if (this.board.flat().includes(0)) return;\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            if (j < 3 && this.board[i][j] === this.board[i][j + 1] || i < 3 && this.board[i][j] === this.board[i + 1][j]) return;\n        }\n        this.status = \"gameover\";\n        this.showMessage(this.messageLose);\n    }\n    checkWin() {\n        if (this.board.flat().includes(2048)) {\n            this.status = \"win\";\n            this.showMessage(this.messageWin);\n        }\n    }\n    updateBoard() {\n        let index = 0;\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            this.cells[index].textContent = this.board[i][j] !== 0 ? this.board[i][j] : \"\";\n            this.cells[index].className = `field-cell field-cell--${this.board[i][j]}`;\n            index++;\n        }\n        this.scoreElement.textContent = this.score;\n        this.checkWin();\n    }\n    showMessage(message) {\n        this.messageLose.classList.add(\"hidden\");\n        this.messageWin.classList.add(\"hidden\");\n        this.messageStart.classList.add(\"hidden\");\n        message.classList.remove(\"hidden\");\n    }\n    hideMessages() {\n        this.messageLose.classList.add(\"hidden\");\n        this.messageWin.classList.add(\"hidden\");\n        this.messageStart.classList.add(\"hidden\");\n    }\n}\nvar $a5fd07fa01589658$export$2e2bcd8739ae039 = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game2048 = new (0, $a5fd07fa01589658$export$2e2bcd8739ae039)();\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button.start\");\nfunction $09e991522ca7e64e$var$updateButton() {\n    if ($09e991522ca7e64e$var$game2048.getStatus() === \"idle\") {\n        $09e991522ca7e64e$var$button.textContent = \"Start\";\n        $09e991522ca7e64e$var$button.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$button.classList.add(\"start\");\n    } else {\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        $09e991522ca7e64e$var$button.classList.remove(\"start\");\n        $09e991522ca7e64e$var$button.classList.add(\"restart\");\n    }\n}\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$game2048.getStatus() === \"idle\") $09e991522ca7e64e$var$game2048.start();\n    else $09e991522ca7e64e$var$game2048.restart();\n    $09e991522ca7e64e$var$updateButton();\n});\n$09e991522ca7e64e$var$updateButton();\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game2048.getStatus() !== \"playing\") return;\n    switch(e.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game2048.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game2048.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game2048.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game2048.moveDown();\n            break;\n    }\n});\n\n\n//# sourceMappingURL=index.8c5dd4dc.js.map\n","import Game from '../modules/Game.class.js';\n\nconst game2048 = new Game();\nconst button = document.querySelector('.button.start');\n\nfunction updateButton() {\n  if (game2048.getStatus() === 'idle') {\n    button.textContent = 'Start';\n    button.classList.remove('restart');\n    button.classList.add('start');\n  } else {\n    button.textContent = 'Restart';\n    button.classList.remove('start');\n    button.classList.add('restart');\n  }\n}\n\nbutton.addEventListener('click', () => {\n  if (game2048.getStatus() === 'idle') {\n    game2048.start();\n  } else {\n    game2048.restart();\n  }\n  updateButton();\n});\n\nupdateButton();\n\ndocument.addEventListener('keydown', (e) => {\n  if (game2048.getStatus() !== 'playing') {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      game2048.moveLeft();\n      break;\n    case 'ArrowRight':\n      game2048.moveRight();\n      break;\n    case 'ArrowUp':\n      game2048.moveUp();\n      break;\n    case 'ArrowDown':\n      game2048.moveDown();\n      break;\n  }\n});\n","class Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.board = initialState;\n    this.score = 0;\n    this.status = 'idle';\n    this.cells = document.querySelectorAll('.field-cell');\n    this.scoreElement = document.querySelector('.game-score');\n    this.messageLose = document.querySelector('.message-lose');\n    this.messageWin = document.querySelector('.message-win');\n    this.messageStart = document.querySelector('.message-start');\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n    this.updateBoard();\n    this.hideMessages();\n  }\n\n  restart() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n    this.status = 'idle';\n    this.start();\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.board[i][j] === 0) {\n          emptyCells.push({ row: i, col: j });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const { row, col } =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  moveLeft() {\n    this.move((row) => row);\n  }\n\n  moveRight() {\n    this.move((row) => row.reverse());\n  }\n\n  moveUp() {\n    this.moveColumns((col) => col);\n  }\n\n  moveDown() {\n    this.moveColumns((col) => col.reverse());\n  }\n\n  move(transformRow) {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let i = 0; i < 4; i++) {\n      const row = transformRow([...this.board[i]]);\n      const compressed = this.compressRow(row);\n      const merged = this.mergeRow(compressed);\n      const finalRow = this.compressRow(merged);\n\n      if (row.toString() !== finalRow.toString()) {\n        moved = true;\n      }\n      this.board[i] = transformRow([...finalRow]);\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.checkGameOver();\n      this.updateBoard();\n    }\n  }\n\n  moveColumns(transformCol) {\n    this.transpose();\n    this.move(transformCol);\n    this.transpose();\n    this.updateBoard();\n  }\n\n  transpose() {\n    const firstRow = this.board[0];\n\n    this.board = firstRow.map((_, colIndex) => {\n      return this.board.map((row) => row[colIndex]);\n    });\n  }\n\n  compressRow(row) {\n    return row\n      .filter((val) => val !== 0)\n      .concat(Array(4).fill(0))\n      .slice(0, 4);\n  }\n\n  mergeRow(row) {\n    for (let i = 0; i < 3; i++) {\n      if (row[i] !== 0 && row[i] === row[i + 1]) {\n        row[i] *= 2;\n        row[i + 1] = 0;\n        this.score += row[i];\n      }\n    }\n\n    return row;\n  }\n\n  checkGameOver() {\n    if (this.board.flat().includes(0)) {\n      return;\n    }\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (\n          (j < 3 && this.board[i][j] === this.board[i][j + 1]) ||\n          (i < 3 && this.board[i][j] === this.board[i + 1][j])\n        ) {\n          return;\n        }\n      }\n    }\n    this.status = 'gameover';\n    this.showMessage(this.messageLose);\n  }\n\n  checkWin() {\n    if (this.board.flat().includes(2048)) {\n      this.status = 'win';\n      this.showMessage(this.messageWin);\n    }\n  }\n\n  updateBoard() {\n    let index = 0;\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        this.cells[index].textContent =\n          this.board[i][j] !== 0 ? this.board[i][j] : '';\n\n        this.cells[index].className =\n          `field-cell field-cell--${this.board[i][j]}`;\n        index++;\n      }\n    }\n    this.scoreElement.textContent = this.score;\n    this.checkWin();\n  }\n\n  showMessage(message) {\n    this.messageLose.classList.add('hidden');\n    this.messageWin.classList.add('hidden');\n    this.messageStart.classList.add('hidden');\n    message.classList.remove('hidden');\n  }\n\n  hideMessages() {\n    this.messageLose.classList.add('hidden');\n    this.messageWin.classList.add('hidden');\n    this.messageStart.classList.add('hidden');\n  }\n}\n\nexport default Game;\n"],"names":["$09e991522ca7e64e$var$game2048","constructor","initialState","board","score","status","cells","document","querySelectorAll","scoreElement","querySelector","messageLose","messageWin","messageStart","getState","getScore","getStatus","start","addRandomTile","updateBoard","hideMessages","restart","emptyCells","i","j","push","row","col","length","Math","floor","random","moveLeft","move","moveRight","reverse","moveUp","moveColumns","moveDown","transformRow","moved","compressed","compressRow","merged","mergeRow","finalRow","toString","checkGameOver","transformCol","transpose","firstRow","map","_","colIndex","filter","val","concat","Array","fill","slice","flat","includes","showMessage","checkWin","index","textContent","className","message","classList","add","remove","$09e991522ca7e64e$var$button","$09e991522ca7e64e$var$updateButton","addEventListener","e","key"],"version":3,"file":"index.8c5dd4dc.js.map"}